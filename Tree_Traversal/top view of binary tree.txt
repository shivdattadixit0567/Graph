top view of binary tree :- in this question indexing concept is used like vertical traversal


    vector<int> topView(Node *root)
    {
        //Your code here
        queue<pair<Node*,int>> q;
        q.push({root,0});
        map<int,int> m;
        vector<int> ans;
        
        while(!q.empty()){
            auto it = q.front();
            Node* node = it.first;
            int index = it.second;
            q.pop();
            
            if(m.find(index)==m.end()){
                m.insert({index,node->data});
            }
            
            if(node->left!=NULL){
                q.push({node->left,index-1});
            }
            if(node->right!=NULL){
                q.push({node->right,index+1});
            }
        }
        for(auto &it:m){
            ans.push_back(it.second);
        }
        return ans;
    }