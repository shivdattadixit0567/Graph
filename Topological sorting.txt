Topological sorting :-

linear ordering of graph such that if there is an edge between u and v , u appers before v in that ordering
It only works in DAG(directed acyclic graph)

time complexity :- O(V + E)
space complexity :- O(n + n)


Code :-

	void dfs(int v, vector<int> adj[], vector<int> &vis, stack<int> &st){
	    vis[v] = 1;
	    
	    for(auto child:adj[v]){
	        if(!vis[child]){
	            dfs(child, adj, vis, st);
	        }
	    }
	    
	    st.push(v);
	}

	vector<int> topoSort(int V, vector<int> adj[]) 
	{
	    // code here
	    vector<int> vis(V,0);
	    
	    stack<int> st;
	    
	    for(int i=0; i < V; i++){
	        if(!vis[i]){
	            dfs(i, adj, vis, st);
	        }
	    }
	    
	    vector<int> ans;
	    while(!st.empty()){
	        ans.push_back(st.top());
	        st.pop();
	    }
	    return ans;
	}