Dijkstra's Algorithm using priority queue :-

it is implement same as bfs but using priority queue of min heap (minimum priority queue) instead of topology sort 

it does not work in graph that contain negative weight or negative weight cycle
it goes into infinite loop

time complexity :- O(E * log(V))

why priority queue instead of queue?

in priority queue we explore only path that have lowest cost while in queue we have to explore all path so it is time consuming and a brute forces method


CODE :-


    vector <int> dijkstra(int V, vector<vector<int>> adj[], int S)
    {
        
        priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>> pq;
        vector<int> dist(V,100000000);
        
        dist[S] = 0;
        
        pq.push({0,S});
        
        while(!pq.empty()){
            // int len = pq.top().first;
            int node = pq.top().second;
            pq.pop();
            
            for(auto it:adj[node]){
                int wt = it[1];
                int v = it[0];
                
                if(dist[node]+wt < dist[v]){
                    dist[v] = dist[node]+wt;
                    pq.push({dist[v],v});
                }
            }
        }
        return dist;
    }