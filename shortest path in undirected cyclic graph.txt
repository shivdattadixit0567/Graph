shortest path in undirected cyclic graph :-

    vector<int> shortestPath(vector<vector<int>>& edges, int N,int M, int src){
        // code here
        vector<int> adj[N];
        for(int i=0;i<M;i++){
            adj[edges[i][0]].push_back(edges[i][1]);
            adj[edges[i][1]].push_back(edges[i][0]);
        }
        
        vector<int> dist(N,1000000000);
        dist[src] = 0;
        queue<int> q;
        q.push(src);
        
        while(!q.empty()){
            int node = q.front();
            q.pop();
            
            for(auto c:adj[node]){
                if(dist[node]+1 < dist[c]){
                    dist[c] = 1 + dist[node];
                    q.push(c);
                }
            }
        }
        
        for(int i = 0; i < N; i++){
            if(dist[i]==1000000000){
                dist[i] = -1;
            }
        }
        return dist;
    }